# Generated by Django 4.0 on 2022-01-04 16:42

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
        ('main', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="You can leave this field blank. The match name will then be set automatically, e.g. 'Team A vs. Team B'", max_length=22, null=True)),
                ('shareMode', models.CharField(choices=[('NONE', 'None'), ('READ_ONLY', 'Read Only'), ('READ_WRITE', 'Read and Write')], default='NONE', max_length=255)),
                ('bestOf', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('status', models.CharField(choices=[('CREATED', 'Created'), ('MAP_BAN', 'Map Ban'), ('PLAYING', 'Playing'), ('CLOSED', 'Closed'), ('ARCHIVED', 'Archived'), ('DUMMY', 'Dummy')], default='CREATED', max_length=255)),
                ('scoreBlue', models.IntegerField(default=0)),
                ('scoreOrange', models.IntegerField(default=0)),
                ('winType', models.CharField(choices=[('NONE', 'None'), ('BLUE_WIN', 'Blue Win'), ('ORANGE_WIN', 'Orange Win'), ('DRAW', 'Draw')], default='NONE', max_length=255)),
                ('date', models.DateTimeField(default=datetime.datetime(2022, 1, 4, 18, 0))),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('lastModified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('additionalUsers', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches', to='auth.user')),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.league')),
                ('playday', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.playday')),
                ('teamBlue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_blue', to='main.team')),
                ('teamOrange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team_orange', to='main.team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.tournament')),
                ('winTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_win_team', to='main.team')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
            },
        ),
        migrations.CreateModel(
            name='MatchMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('CREATED', 'Created'), ('PREPARING', 'Preparing'), ('OPERATOR_BAN', 'Operator Ban'), ('PLAYING', 'Playing'), ('OVERTIME', 'Overtime'), ('FINISHED', 'Finished')], default='CREATED', max_length=255)),
                ('order', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('scoreBlue', models.IntegerField(default=0)),
                ('scoreOrange', models.IntegerField(default=0)),
                ('winType', models.CharField(choices=[('NONE', 'None'), ('BLUE_WIN', 'Blue Win'), ('ORANGE_WIN', 'Orange Win'), ('BLUE_OT_WIN', 'Blue Overtime Win'), ('ORANGE_OT_WIN', 'Orange Overtime Win'), ('DRAW', 'Draw')], default='NONE', max_length=255)),
                ('atkTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matchMapATKTeam', to='main.team')),
                ('defTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matchMapDEFTeam', to='main.team')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.map')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='match.match')),
                ('otAtkTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matchMapOTATKTeam', to='main.team')),
                ('otDefTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matchMapOTDEFTeam', to='main.team')),
                ('winTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matchMapWinTeam', to='main.team')),
            ],
            options={
                'verbose_name': 'Match Map',
            },
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roundNo', models.IntegerField(default=1)),
                ('winType', models.IntegerField(choices=[('KILLS', 'Kills'), ('DEFUSER_PLANTED', 'Defuser Planted'), ('DEFUSER_DISABLED', 'Defuser Disabled'), ('TIME', 'Time')], default=1)),
                ('notes', models.TextField(blank=True, null=True)),
                ('bombSpot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bombspot')),
                ('matchMap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='match.matchmap')),
                ('openingFragTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='round_of_team', to='main.team')),
                ('winTeam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='round_win_team', to='main.team')),
            ],
        ),
        migrations.CreateModel(
            name='OperatorBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('matchMap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='match.matchmap')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.operator')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.team')),
            ],
            options={
                'verbose_name': 'Operator Ban',
            },
        ),
        migrations.CreateModel(
            name='MapBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('BAN', 'Ban'), ('PICK', 'Pick')], default='BAN', max_length=255)),
                ('order', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('isDecider', models.BooleanField(default=False, help_text='Map is Decider Map or Default Ban?')),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.map')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='match.match')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.team')),
            ],
            options={
                'verbose_name': 'Map Ban',
            },
        ),
    ]
